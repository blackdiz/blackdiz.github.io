<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>server side on Blackdiz's Garage</title><link>https://blackdiz.github.io/tags/server-side/</link><description>Recent content in server side on Blackdiz's Garage</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Wed, 21 Jul 2021 20:28:15 +0800</lastBuildDate><atom:link href="https://blackdiz.github.io/tags/server-side/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 2、1、&amp; 和 ></title><link>https://blackdiz.github.io/blog/linux-redirection-operators/</link><pubDate>Wed, 21 Jul 2021 20:28:15 +0800</pubDate><guid>https://blackdiz.github.io/blog/linux-redirection-operators/</guid><description>小記一下 command 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null 和 command &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 的差別。首先先看 2&amp;gt;&amp;amp;1 的意思。在 Linux 的 file descriptor 中，1 表示 stdout (標準輸出) 表示程式執行中輸出訊息的地方，預設為 terminal。而 2 表示 stderr (標準錯誤輸出) 表示程式執行中發生錯誤時輸出錯誤訊息的地方，預設也是 terminal。
&amp;gt; 表示把 &amp;gt; 前方的輸出都導到 &amp;gt; 後方的目標。
而 &amp;gt;&amp;amp; 表示把 &amp;gt;&amp;amp; 前的 file descriptor 指向 &amp;gt;&amp;amp; 後方的 file descriptor，&amp;amp; 表示目標是 file descriptor 而不是檔案。
/dev/null 是個特殊的目標，任何輸入到它的訊息都會消失不會輸出到任何其他地方。
在了解各部分的作用後，現在把它們組合起來看，command 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null 表示執行 command，把 stderr 輸出的目標指向 stdout 目前輸出的目標，因為 stdout 目前指向的目標是 terminal，所以 stderr 指向的目標就變成 terminal，最後 &amp;gt; /dev/null 表示把 stdout 輸出的目標指向 /dev/null，所以最終執行的結果就是 stderr 會輸出到 terminal 而 stdout 會輸出到 /dev/null。 command &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 則是執行 command，&amp;gt; /dev/null 會把 stdout 輸出目標指向 /dev/null，而最後面的 2&amp;gt;&amp;amp;1 會再把 stderr 輸出的目標指向目前 stdout 的輸出目標，所以也同樣變成 /dev/null，因此最終執行結果會是 stdout 和 stderr 都會輸出到 /dev/null 中。</description></item><item><title>Use FreeMarker Template to Output JSON</title><link>https://blackdiz.github.io/blog/freemarker-json/</link><pubDate>Tue, 06 Jul 2021 01:28:39 +0800</pubDate><guid>https://blackdiz.github.io/blog/freemarker-json/</guid><description>首先我們先準備一個 FreeMarker 的 template: test.fltj, fltj 是我們自創給 JSON 格式 tempalte 的副檔名:
{ &amp;quot;name&amp;quot;: &amp;quot;test&amp;quot;, ${content} } ${content} 就是我們等會兒要動態設置的部分。
接著我們需要建立 FreeMarker 的 Configruation，這個 Configuration 理論上只需要建立一個：
Configuration configuration = new Configuration(Configuration.VERSION_2_3_25); // 這裡設定 JSON 範本的路徑 configuration.setClassForTemplateLoading(this.getClass(), &amp;#34;/templates/json-templates&amp;#34;); configuration.setDefaultEncoding(&amp;#34;UTF-8&amp;#34;); configuration.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER); configuration.setLogTemplateExceptions(false); 這裡我們使用 jackson 這個 library 來幫我們把 Java 物件轉成 JSON 格式的字串：
Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;(); data.put(&amp;#34;text&amp;#34;, &amp;#34;test message&amp;#34;); data.put(&amp;#34;age&amp;#34;, 23); data.put(&amp;#34;boolean&amp;#34;, true); ObjectMapper mapper = new ObjectMapper(); // writerWithDefaultPrettyPrinter() 會排版輸出的結果 String jsonString = mapper.</description></item><item><title>從 Server 端輸出下載的檔名含有中文會變成亂碼問題</title><link>https://blackdiz.github.io/blog/garbled-file-name/</link><pubDate>Mon, 22 Mar 2021 15:15:46 +0800</pubDate><guid>https://blackdiz.github.io/blog/garbled-file-name/</guid><description>朋友遇到一個問題是如果檔名有中文，在瀏覽器下載時檔名會變成亂碼。
首先，瀏覽器是用 header 中的 Content-Disposition=attachment;filename=${檔名} 做為預設的下載檔名，但 header 中並不支援 UTF-8 編碼，所以如果在程式中直接拿中文檔名放在 filename 中就會變成亂碼。
解決方法是先把檔名 encode 成 URL-encoded 編碼，在 Java 中可以用 URLEncoder 處理：
response.setHeader(&amp;#34;Content-Disposition&amp;#34;, &amp;#34;attachment;filename=&amp;#34; + URLEncoder.encode(fileName, &amp;#34;UTF-8&amp;#34;); 如果有什麼想法或需要指正的地方，歡迎您留言或來信 😄</description></item></channel></rss>