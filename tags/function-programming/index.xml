<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>function programming on Blackdiz's Garage</title><link>https://blackdiz.github.io/tags/function-programming/</link><description>Recent content in function programming on Blackdiz's Garage</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sat, 14 Aug 2021 22:33:38 +0800</lastBuildDate><atom:link href="https://blackdiz.github.io/tags/function-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Higher Order Function 小記</title><link>https://blackdiz.github.io/blog/higher-order-function/</link><pubDate>Sat, 14 Aug 2021 22:33:38 +0800</pubDate><guid>https://blackdiz.github.io/blog/higher-order-function/</guid><description>在 Functional Programming (函式程式設計) 的世界中，function (函式) 本身可以接受另一個 function 的做為參數，或昔返回一個 function 做為回傳值，這就是所謂 Higher Order Function。
以 JavaScript 為例，比方我們想在每次執行 function 時附帶執行 1 個 function，我們可以把要附帶執行的 function 做為參數傳入：
let f = function() { console.log(&amp;#34;I&amp;#39;m callback&amp;#34;); } // 這裡 callback function 做為參數傳入 function add(a, b, callback) { // 所以我們可以在 a + b 之前執行傳入的 function callback(); return a + b } let sum = add(3, 4, f); console.log(sum); 會印出：
I'm callback 7 另一方面我們也可以回傳 function，這裡的 addThree() 回傳一個 function 是接受一個參數 x 回傳 x + 3，所以 sum(4)，會得到 7：</description></item></channel></rss>