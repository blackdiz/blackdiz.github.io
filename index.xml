<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blackdiz&#39;s Garage</title>
    <link>https://blackdiz.github.io/</link>
    <description>Recent content on Blackdiz&#39;s Garage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Thu, 26 Aug 2021 23:38:30 +0800</lastBuildDate><atom:link href="https://blackdiz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PubSub Local Emulator</title>
      <link>https://blackdiz.github.io/blog/pubsub-local-emulator/</link>
      <pubDate>Thu, 26 Aug 2021 23:38:30 +0800</pubDate>
      
      <guid>https://blackdiz.github.io/blog/pubsub-local-emulator/</guid>
      <description>PubSub 是 GCP 上類似 Message Queue 的服務，為了測試方便，Google 提供了可在本機端啟動的模擬程式讓開發者可以不用連上 GCP 直接使用本機的 PubSub service。
這篇算是記錄一下整個安裝過程和使用 Java 程式連接本機 PubSub 的程式片段。
安裝 Google Cloud SDK 首先需要安裝 Google Cloud SDK，目前只有在 MAC 上安裝，所以下面只簡單記錄一下 MAC 下的安裝步驟，其他環境可以到 Google Cloud SDK Guide 有詳細的說明。
如果 Mac 是 M1 版本下載 google-cloud-sdk-354.0.0-darwin-arm.tar.gz，非 M1 則下載 google-cloud-sdk-354.0.0-darwin-x86_64.tar.gz，解壓縮後執行：
./google-cloud-sdk/install.sh &amp;amp;&amp;amp; ./google-cloud-sdk/bin/gcloud init 安裝 PubSub emulator 執行：
gcloud components install pubsub-emulator gcloud components update 啟動 PubSub emulator 執行，PUBSUB_PROJECT_ID 可以自由命名，在後面連線到 PubSub 時會用到。另外 PubSub 每次啟動時的 listen port 是隨機的，為了方便起見，我們用 --host-port=0.</description>
    </item>
    
    <item>
      <title>Higher Order Function 小記</title>
      <link>https://blackdiz.github.io/blog/higher-order-function/</link>
      <pubDate>Sat, 14 Aug 2021 22:35:07 +0800</pubDate>
      
      <guid>https://blackdiz.github.io/blog/higher-order-function/</guid>
      <description>Higher Order Function 小記 在 Functional Programming (FP 函數向導向) 的世界中，function (函數) 本身可以接受另一個 function 的做為參數並返回 function，這就是所謂 Higher Order Function。
以 JavaScript 為例，比方我們想在每次執行 function 時附帶執行 1 個 function，我們可以把要附帶執行的 function 做為參數傳入：
let f = function c() { console.log(&amp;#34;I&amp;#39;m callback&amp;#34;); } // 這裡 callback function 做為參數傳入 function add(a, b, callback) { // 所以我們可以在 a + b 之前執行傳入的 function  callback(); return a + b } let sum = add(3, 4, f); console.log(sum); 會印出：
7 I&#39;m callback 另一方面我們也可以回傳 function，這裡的 addThree() 回傳一個 function 是接受一個參數 x 回傳 x + 3，所以 sum(4)，會得到 7：</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blackdiz.github.io/about/</link>
      <pubDate>Sat, 20 Mar 2021 19:24:20 +0800</pubDate>
      
      <guid>https://blackdiz.github.io/about/</guid>
      <description>一名充滿好奇心的小小工師，學習程式喜歡了解探究原理。因為自知美感欠知所以興趣集中在後端系統上，覺得看到大系統中每個組件能完美地契合運作是件非常美妙的事。 這裡記錄著各種學習記錄、工作上遇到的各種問題和解法，如果有錯誤的地方歡迎指教。
Email: blackdiz@gmail.com
Github: https://github.com/blackdiz</description>
    </item>
    
    <item>
      <title>LeetCode 1. Two Sum</title>
      <link>https://blackdiz.github.io/blog/two-sum/</link>
      <pubDate>Tue, 01 Dec 2020 23:10:57 +0800</pubDate>
      
      <guid>https://blackdiz.github.io/blog/two-sum/</guid>
      <description>LeetCode 1. Two Sum Easy
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. 解決方法 1 直覺的話就是暴力解法，用所有元素組合兩兩相加直到找出加總等於 target 為止。</description>
    </item>
    
  </channel>
</rss>
